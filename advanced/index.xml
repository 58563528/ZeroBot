<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanceds on ZeroBot Document</title>
    <link>http://docs.wdvxdr.top/advanced/</link>
    <description>Recent content in Advanceds on ZeroBot Document</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 19 Jan 2021 16:43:41 +0800</lastBuildDate><atom:link href="http://docs.wdvxdr.top/advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event Channel</title>
      <link>http://docs.wdvxdr.top/advanced/interact/</link>
      <pubDate>Tue, 19 Jan 2021 16:43:41 +0800</pubDate>
      
      <guid>http://docs.wdvxdr.top/advanced/interact/</guid>
      <description>Event Channel #  在 ZeroBot 中，提供了用于异步获取指定事件的方法，通过返回channel，搭配 go 语言的select和其他语言特性， 可以很轻松的实现交互式机器人。
其核心为 FutureEvent，其定义如下
// FutureEvent 是 ZeroBot 交互式的核心，用于异步获取指定事件 type FutureEvent struct { // 需要获取的事件类型  //  // 形如 message/group, 具体为 post_type / detail_type / sub_type  Type string // 优先级， 同 Matcher  Priority int // 同 Matcher  Rule []Rule // 同 Matcher  Block bool } 你可以使用 zero.NewFutureEvent 创建，或者使用matcher.FutureEvent来创建一个与当前matcher 优先级和阻断性相同的FutureEvent
FutureEvent提供了两个基本方法，用于获取符合条件的事件。
Next #  Next 返回一个 channel 用于接收下一个指定事件，并且该事件传输完成后，就会关闭该 channel,</description>
    </item>
    
    <item>
      <title>Rule</title>
      <link>http://docs.wdvxdr.top/advanced/basic/</link>
      <pubDate>Tue, 29 Dec 2020 13:55:32 +0800</pubDate>
      
      <guid>http://docs.wdvxdr.top/advanced/basic/</guid>
      <description>Rule #  Rule 是ZeroBot过滤事件的核心,其定义如下所示
// State store the context of a matcher. type State map[string]interface{} // Rule filter the event type Rule func(event *Event, state State) bool 其中 State 保存了在进行过滤事件中运算的结果，比如ZeroBot自带的 KeywordRule中，就将匹配到的关键词保存到了state[&amp;quot;keyword&amp;quot;]中
// KeywordRule check if the message has a keyword or keywords func KeywordRule(src ...string) Rule { return func(event *Event, state State) bool { msg := event.Message.CQString() for _, str := range src { if strings.Contains(msg, str) { state[&amp;#34;keyword&amp;#34;] = str return true } } return false } } ZeroBot中自带了一些Rule，你可以在rule.</description>
    </item>
    
  </channel>
</rss>
